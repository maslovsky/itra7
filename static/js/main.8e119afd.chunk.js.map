{"version":3,"sources":["serviceWorker.js","components/stepper/step/step.jsx","components/stepper/step-summary/step-summary.jsx","components/stepper/stepper.jsx","index.js","components/app/app.jsx"],"names":["Boolean","window","location","hostname","match","Step","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","selectedId","data","eventData","parseInt","target","value","setState","props","onSelect","options","list","map","getOption","react_default","a","createElement","className","title","onChange","bind","find","x","selected","id","Component","index","key","StepSummary","stepData","Stepper","activeStepIndex","forEach","currentStepData","selectedParentId","filteredList","filter","prevStepId","undefined","assign","length","renderStep","renderStepSummary","onClick","stepBack","disabled","stepForward","canStepForward","hasSelectedValue","some","stepSource","getStepSource","step_Step","step_summary_StepSummary","ReactDOM","render","Fragment","stepper_Stepper","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8e119afd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, {Component} from 'react';\r\n\r\nexport default class Step extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            selectedId: null,\r\n            data: null\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        const selectedItem = props.data.list.find(x => x.selected) || {id: null};\r\n\r\n        return {\r\n            selectedId: selectedItem.id,\r\n            data: props.data\r\n        };\r\n    }\r\n\r\n    onSelect(eventData) {\r\n        const selectedId = parseInt(eventData.target.value) || null;\r\n\r\n        this.setState({selectedId});\r\n\r\n        this.props.onSelect(selectedId)\r\n    }\r\n\r\n    render() {\r\n        const selectedId = this.state.selectedId === null\r\n            ? ''\r\n            : this.state.selectedId;\r\n\r\n        const options =  this.state.data.list.map(getOption);\r\n\r\n        return (\r\n            <div className=\"step\">\r\n                <div className=\"title\">{this.state.data.title}</div>\r\n\r\n                <div className=\"content\">\r\n                    <select value={selectedId} onChange={this.onSelect.bind(this)}>\r\n                        {options}\r\n                    </select>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction getOption(data, index) {\r\n    return (<option value={data.id} key={index}>{data.value}</option>);\r\n}","import React, {Component} from 'react';\r\n\r\nexport default class StepSummary extends Component {\r\n    constructor() {\r\n        super();\r\n\r\n        this.state = {\r\n            data: null\r\n        };\r\n    }\r\n\r\n    static getDerivedStateFromProps(props, state) {\r\n        return {\r\n            data: props.data\r\n        };\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"step-summary\">\r\n                <div className=\"title\">Summary</div>\r\n\r\n                <div className=\"content\">\r\n                    {\r\n                        this.state.data.map((stepData, index) => <div key={index}>{stepData.list.find(x => x.selected).value}</div>)\r\n                    }\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\n\r\nimport Step from './step/step';\r\nimport StepSummary from './step-summary/step-summary';\r\n\r\nimport './stepper.css';\r\n\r\nexport default class Stepper extends Component {\r\n    constructor(props) {\r\n        super();\r\n\r\n        this.state = {\r\n            activeStepIndex: 0,\r\n            data: props.data\r\n        };\r\n    }\r\n\r\n    stepForward() {\r\n        const {activeStepIndex} = this.state;\r\n\r\n        this.setState({activeStepIndex: activeStepIndex + 1});\r\n    }\r\n\r\n    stepBack() {\r\n        const {activeStepIndex} = this.state;\r\n\r\n        this.setState({activeStepIndex: activeStepIndex - 1});\r\n    }\r\n\r\n    onSelect(activeStepIndex, id) {\r\n        this.state.data[activeStepIndex].list.forEach(x => x.selected = x.id === id);\r\n\r\n        this.setState({data: this.state.data});\r\n    }\r\n\r\n    getStepSource() {\r\n        const currentStepData = this.state.data[this.state.activeStepIndex];\r\n\r\n        if (this.state.activeStepIndex === 0) {\r\n            return currentStepData;\r\n        }\r\n\r\n        const selectedParentId = this.state.data[this.state.activeStepIndex - 1].list.find(x => x.selected).id;\r\n\r\n        const filteredList = currentStepData.list.filter(x => x.prevStepId === selectedParentId || x.prevStepId === undefined);\r\n\r\n        return Object.assign({}, currentStepData, {list: filteredList});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"stepper-container\">\r\n                {\r\n                    (this.state.activeStepIndex < this.state.data.length ? this.renderStep() : this.renderStepSummary())\r\n                }\r\n\r\n                <div className=\"navigation\">\r\n                    <button className=\"back\" onClick={this.stepBack.bind(this)} disabled={this.state.activeStepIndex === 0}>Back</button>\r\n                    <button className=\"next\" onClick={this.stepForward.bind(this)} disabled={!this.canStepForward()}>Next</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    canStepForward() {\r\n        return this.state.activeStepIndex < this.state.data.length && this.hasSelectedValue();\r\n    }\r\n\r\n    hasSelectedValue() {\r\n        const currentSource = this.state.data[this.state.activeStepIndex].list;\r\n        return currentSource.some(x => x.selected && x.id !== null);\r\n    }\r\n\r\n    renderStep() {\r\n        const stepSource = this.getStepSource();\r\n\r\n        return (\r\n            <Step data={stepSource}\r\n                  onSelect={this.onSelect.bind(this, this.state.activeStepIndex)} />\r\n        )\r\n    }\r\n\r\n    renderStepSummary() {\r\n        return (<StepSummary data={this.state.data}></StepSummary>);\r\n    }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/app/app';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n","import React from 'react';\r\n\r\nimport Stepper from '../stepper/stepper';\r\nimport data from '../../data/data';\r\n\r\nexport default () => {\r\n    return (\r\n        <>\r\n            <h1>Hello :)</h1>\r\n\r\n            <Stepper data={data}/>\r\n        </>\r\n    )\r\n}\r\n"],"sourceRoot":""}